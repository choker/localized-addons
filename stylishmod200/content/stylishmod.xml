<?xml version="1.0"?>
<!DOCTYPE bindings [
  <!ENTITY % findBarDTD SYSTEM "chrome://global/locale/findbar.dtd">
  <!ENTITY % stylishModDTD SYSTEM 'chrome://stylishmod/locale/stylishmod.dtd'>
  %findBarDTD;
  %stylishModDTD;
]>
<bindings id="findbarBindings" xmlns="http://www.mozilla.org/xbl" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:xbl="http://www.mozilla.org/xbl">
  <binding id="findbar-textbox" extends="chrome://global/content/bindings/textbox.xml#textbox">
    <implementation>
      <field name="_findbar">null</field>
      <property name="findbar" readonly="true">
        <getter>
          return this._findbar ? this._findbar : this._findbar = document.getBindingParent(this);
        </getter>
      </property>
      <method name="_handleEnter">
        <parameter name="aEvent"/>
        <body>
          <![CDATA[
            if (this.findbar._findMode == this.findbar.FIND_NORMAL) {
              let findString = this.findbar._findField;
              if (!findString.value) return;
              if (aEvent.ctrlKey) {
                this.findbar.getElement("highlight").click();
                return;
              }
              this.findbar.onFindAgainCommand(aEvent.shiftKey);
            } else {
              this.findbar._finishFAYT(aEvent);
            }
          ]]>
        </body>
      </method>
      <method name="_handleTab">
        <parameter name="aEvent"/>
        <body>
          <![CDATA[
            let shouldHandle = !aEvent.altKey && !aEvent.ctrlKey && !aEvent.metaKey;
            if (shouldHandle && this.findbar._findMode != this.findbar.FIND_NORMAL) this.findbar._finishFAYT(aEvent);
          ]]>
        </body>
      </method>
    </implementation>
    <handlers>
      <handler event="input">
        <![CDATA[
          if (this.findbar._isIMEComposing) return;
          this.findbar._find(this.value);
        ]]>
      </handler>
      <handler event="keypress">
        <![CDATA[
          let shouldHandle = !event.altKey && !event.ctrlKey && !event.metaKey && !event.shiftKey;
          switch (event.keyCode) {
            case KeyEvent.DOM_VK_RETURN:
              this._handleEnter(event);
              break;
            case KeyEvent.DOM_VK_TAB:
              this._handleTab(event);
              break;
            case KeyEvent.DOM_VK_PAGE_UP:
            case KeyEvent.DOM_VK_PAGE_DOWN:
              if (shouldHandle) {
                this.findbar.browser.finder.keyPress(event);
                event.preventDefault();
              }
              break;
            case KeyEvent.DOM_VK_UP:
            case KeyEvent.DOM_VK_DOWN:
              this.findbar.browser.finder.keyPress(event);
              event.preventDefault();
              break;
          }
        ]]>
      </handler>
      <handler event="blur">
        <![CDATA[
          let findbar = this.findbar;
          findbar.browser.finder.enableSelection();
        ]]>
      </handler>
      <handler event="compositionstart">
        <![CDATA[
          let findbar = this.findbar;
          findbar._isIMEComposing = true;
          if (findbar._quickFindTimeout) {
            clearTimeout(findbar._quickFindTimeout);
            findbar._quickFindTimeout = null;
          }
        ]]>
      </handler>
      <handler event="compositionend">
        <![CDATA[
          let findbar = this.findbar;
          findbar._isIMEComposing = false;
          if (findbar._findMode != findbar.FIND_NORMAL) findbar._setFindCloseTimeout();
        ]]>
      </handler>
      <handler event="dragover">
        <![CDATA[
          if (event.dataTransfer.types.contains("text/plain")) event.preventDefault();
        ]]>
      </handler>
      <handler event="drop">
        <![CDATA[
          let value = event.dataTransfer.getData("text/plain");
          this.value = value;
          this.findbar._find(value);
          event.stopPropagation();
          event.preventDefault();
        ]]>
      </handler>
    </handlers>
  </binding>
  <binding id="findbar" extends="chrome://global/content/bindings/toolbar.xml#toolbar">
    <resources>
      <stylesheet src="chrome://global/skin/findBar.css"/>
    </resources>
    <content hidden="true">
    <xul:hbox anonid="findbar-container" class="findbar-container" align="center">
      <xul:description anonid="find-status" id="find-status" class="findbar-find-fast findbar-find-status" control="findbar-textbox"/>
      <xul:hbox anonid="findbar-textbox-wrapper" id="findbar-wrapper" align="center">
        <xul:button anonid="find-clear" id="clear3" class="findbar-clear button" tooltiptext="Clear input field" oncommand="clear(); clearFind()"/>
        <xul:textbox anonid="findbar-textbox" class="findbar-textbox findbar-find-fast" xbl:inherits="flash" style="height: 26px;"/>
        <xul:toolbarbutton anonid="find-next" id="find-next" class="findbar-find-next tabbable" tooltiptext="&next.tooltip;" oncommand="onFindAgainCommand(false);"
          disabled="true" xbl:inherits="accesskey=findnextaccesskey" style="min-height: 26px; min-width: 26px;"/>
        <xul:toolbarbutton anonid="find-previous" id="find-previous" class="findbar-find-previous tabbable" tooltiptext="&previous.tooltip;" oncommand="onFindAgainCommand(true);"
          disabled="true" xbl:inherits="accesskey=findpreviousaccesskey" style="min-height: 26px; min-width: 26px;"/>
      </xul:hbox>
      <xul:toolbarbutton anonid="highlight" class="findbar-highlight tabbable" label="&highlightAll.label;" accesskey="&highlightAll.accesskey;" tooltiptext="&highlightAll.tooltiptext;"
        oncommand="toggleHighlight(this.checked);" type="checkbox" xbl:inherits="accesskey=highlightaccesskey"/>
      <xul:toolbarbutton anonid="find-case-sensitive" class="findbar-case-sensitive tabbable" label="&caseSensitive.label;" accesskey="&caseSensitive.accesskey;"
        tooltiptext="&caseSensitive.tooltiptext;" oncommand="_setCaseSensitivity(this.checked);" type="checkbox" xbl:inherits="accesskey=matchcaseaccesskey"/>
      <xul:label anonid="match-case-status" class="findbar-find-fast"/>
      <xul:label anonid="found-matches" class="findbar-find-fast found-matches" hidden="true"/>
      <xul:image anonid="find-status-icon" class="findbar-find-fast find-status-icon"/>
    </xul:hbox>
    <xul:toolbarbutton anonid="find-closebutton" class="findbar-closebutton close-icon" tooltiptext="&findCloseButton.tooltip;" oncommand="close();"/>
    </content>
    <implementation implements="nsIDOMEventListener, nsIEditActionListener">
      <field name="FIND_NORMAL">0</field>
      <field name="FIND_TYPEAHEAD">1</field>
      <field name="FIND_LINKS">2</field>
      <field name="_findMode">0</field>
      <field name="_flashFindBar">0</field>
      <field name="_initialFlashFindBarCount">6</field>
      <property name="prefillWithSelection" onget="return this.getAttribute('prefillwithselection') != 'false'" onset="this.setAttribute('prefillwithselection', val); return val;"/>
      <field name="_selectionMaxLen">150</field>
      <method name="getElement">
        <parameter name="aAnonymousID"/>
        <body>
          <![CDATA[
            return document.getAnonymousElementByAttribute(this, "anonid", aAnonymousID)
          ]]>
        </body>
      </method>
      <property name="findMode" readonly="true" onget="return this._findMode;"/>
      <property name="canClear" readonly="true">
        <getter>
          <![CDATA[
            if (this._findField.value) return true;
            if (this._findField.editor) {
              let tm = this._findField.editor.transactionManager;
              return !!(tm.numberOfUndoItems || tm.numberOfRedoItems);
            }
            return false;
          ]]>
        </getter>
      </property>
      <field name="_browser">null</field>
      <property name="browser">
        <getter>
          <![CDATA[
            if (!this._browser) this._browser = document.getElementById(this.getAttribute("browserid"));
            return this._browser;
          ]]>
        </getter>
        <setter>
          <![CDATA[
            if (this._browser) {
              this._browser.removeEventListener("keypress", this, false);
              this._browser.removeEventListener("mouseup", this, false);
              let finder = this._browser.finder;
              if (finder) finder.removeResultListener(this);
            }
            this._browser = val;
            if (this._browser) {
              this._browser.addEventListener("keypress", this, false);
              this._browser.addEventListener("mouseup", this, false);
              this._browser.finder.addResultListener(this);
              this._findField.value = this._browser._lastSearchString;
              this.toggleHighlight(this.browser._lastSearchHighlight);
            }
            return val;
          ]]>
        </setter>
      </property>
      <field name="_observer">
        <![CDATA[({
          _self: this,
          QueryInterface: function(aIID) {
            if (aIID.equals(Components.interfaces.nsIObserver) || aIID.equals(Components.interfaces.nsISupportsWeakReference) || aIID.equals(Components.interfaces.nsISupports)) return this;
            throw Components.results.NS_ERROR_NO_INTERFACE;
          },
          observe: function(aSubject, aTopic, aPrefName) {
            if (aTopic != "nsPref:changed") return;
            let prefsvc = aSubject.QueryInterface(Components.interfaces.nsIPrefBranch);
            switch (aPrefName) {
              case "accessibility.typeaheadfind":
                this._self._useTypeAheadFind = prefsvc.getBoolPref(aPrefName);
                break;
              case "accessibility.typeaheadfind.linksonly":
                this._self._typeAheadLinksOnly = prefsvc.getBoolPref(aPrefName);
                break;
              case "accessibility.typeaheadfind.casesensitive":
                this._self._typeAheadCaseSensitive = prefsvc.getIntPref(aPrefName);
                this._self._updateCaseSensitivity();
                if (this._self.getElement("highlight").checked) this._self._setHighlightTimeout();
              break;
            }
          }
        })]]>
      </field>
      <field name="_destroyed">false</field>
      <constructor>
        <![CDATA[
          this._findField = this.getElement("findbar-textbox");
          this._foundMatches = this.getElement("found-matches");
          this._findStatusIcon = this.getElement("find-status-icon");
          this._findStatusDesc = this.getElement("find-status");
          this._foundURL = null;
          let prefsvc = Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefBranch);
          this._quickFindTimeoutLength = prefsvc.getIntPref("accessibility.typeaheadfind.timeout");
          this._flashFindBar = prefsvc.getIntPref("accessibility.typeaheadfind.flashBar");
          this._matchesCountTimeoutLength = prefsvc.getIntPref("accessibility.typeaheadfind.matchesCountTimeout");
          this._matchesCountLimit = prefsvc.getIntPref("accessibility.typeaheadfind.matchesCountLimit");
          prefsvc.addObserver("accessibility.typeaheadfind", this._observer, false);
          prefsvc.addObserver("accessibility.typeaheadfind.linksonly", this._observer, false);
          prefsvc.addObserver("accessibility.typeaheadfind.casesensitive", this._observer, false);
          this._useTypeAheadFind = prefsvc.getBoolPref("accessibility.typeaheadfind");
          this._typeAheadLinksOnly = prefsvc.getBoolPref("accessibility.typeaheadfind.linksonly");
          this._typeAheadCaseSensitive = prefsvc.getIntPref("accessibility.typeaheadfind.casesensitive");
          this.nsITypeAheadFind = Components.interfaces.nsITypeAheadFind;
          this.nsISelectionController = Components.interfaces.nsISelectionController;
          this._findSelection = this.nsISelectionController.SELECTION_FIND;
          this._findResetTimeout = -1;
          if (this.getAttribute("browserid")) setTimeout(function(aSelf) { aSelf.browser = aSelf.browser; }, 0, this);
        ]]>
      </constructor>
      <destructor>
        <![CDATA[
          this.destroy();
        ]]>
      </destructor>
      <method name="destroy">
        <body>
          <![CDATA[
            if (this._destroyed) return;
            this._destroyed = true;
            this.browser = null;
            let prefsvc = Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefBranch);
            prefsvc.removeObserver("accessibility.typeaheadfind", this._observer);
            prefsvc.removeObserver("accessibility.typeaheadfind.linksonly", this._observer);
            prefsvc.removeObserver("accessibility.typeaheadfind.casesensitive", this._observer);
            this._cancelTimers();
          ]]>
        </body>
      </method>
      <method name="_cancelTimers">
        <body>
          <![CDATA[
            if (this._flashFindBarTimeout) {
              clearInterval(this._flashFindBarTimeout);
              this._flashFindBarTimeout = null;
            }
            if (this._quickFindTimeout) {
              clearTimeout(this._quickFindTimeout);
              this._quickFindTimeout = null;
            }
            if (this._highlightTimeout) {
              clearTimeout(this._highlightTimeout);
              this._highlightTimeout = null;
            }
            if (this._findResetTimeout) {
              clearTimeout(this._findResetTimeout);
              this._findResetTimeout = null;
            }
            if (this._updateMatchesCountTimeout) {
              clearTimeout(this._updateMatchesCountTimeout);
              this._updateMatchesCountTimeout = null;
            }
          ]]>
        </body>
      </method>
      <method name="_setFindCloseTimeout">
        <body>
          <![CDATA[
            if (this._quickFindTimeout) clearTimeout(this._quickFindTimeout);
            if (this._isIMEComposing || this.hidden) {
              this._quickFindTimeout = null;
              return;
            }
            this._quickFindTimeout = setTimeout(() => {
              if (this._findMode != this.FIND_NORMAL) this.close();
              this._quickFindTimeout = null;
            }, this._quickFindTimeoutLength);
          ]]>
        </body>
      </method>
      <field name="_pluralForm">null</field>
      <property name="pluralForm">
        <getter>
          <![CDATA[
            if (!this._pluralForm) this._pluralForm = Components.utils.import("resource://gre/modules/PluralForm.jsm", {}).PluralForm;
            return this._pluralForm;
          ]]>
        </getter>
      </property>
      <method name="_updateMatchesCountWorker">
        <parameter name="aRes"/>
        <body>
          <![CDATA[
            let word = this._findField.value;
            if (aRes == this.nsITypeAheadFind.FIND_NOTFOUND || !word) {
              this._foundMatches.hidden = true;
              this._foundMatches.value = "";
            } else {
              let matchesCount = this.browser.finder.requestMatchesCount(word, this._matchesCountLimit, this._findMode == this.FIND_LINKS);
              window.clearTimeout(this._updateMatchesCountTimeout);
              this._updateMatchesCountTimeout = null;
            }
          ]]>
        </body>
      </method>
      <method name="_updateMatchesCount">
        <parameter name="aRes"/>
        <body>
          <![CDATA[
            if (this._matchesCountLimit == 0 || !this._dispatchFindEvent("matchescount")) return;
            if (this._updateMatchesCountTimeout) {
              window.clearTimeout(this._updateMatchesCountTimeout);
              this._updateMatchesCountTimeout = null;
            }
            this._updateMatchesCountTimeout = window.setTimeout(() => this._updateMatchesCountWorker(aRes), this._matchesCountTimeoutLength);
          ]]>
        </body>
      </method>
      <method name="toggleHighlight">
        <parameter name="aHighlight"/>
        <body>
          <![CDATA[
            if (!this._dispatchFindEvent("highlightallchange")) return;
            let word = this._findField.value;
            if (aHighlight && !word) return;
            this.browser._lastSearchHighlight = aHighlight;
            this.browser.finder.highlight(aHighlight, word);
            this._updateMatchesCount(this.nsITypeAheadFind.FIND_FOUND);
          ]]>
        </body>
      </method>
      <method name="_updateCaseSensitivity">
        <parameter name="aString"/>
        <body>
          <![CDATA[
            let val = aString || this._findField.value;
            let caseSensitive = this._shouldBeCaseSensitive(val);
            let checkbox = this.getElement("find-case-sensitive");
            let statusLabel = this.getElement("match-case-status");
            checkbox.checked = caseSensitive;
            statusLabel.value = caseSensitive ? this._caseSensitiveStr : "";
            let hideCheckbox = this._findMode != this.FIND_NORMAL || (this._typeAheadCaseSensitive != 0 && this._typeAheadCaseSensitive != 1);
            checkbox.hidden = hideCheckbox;
            statusLabel.hidden = !hideCheckbox;
            this.browser.finder.caseSensitive = caseSensitive;
          ]]>
        </body>
      </method>
      <method name="_setCaseSensitivity">
        <parameter name="aCaseSensitive"/>
        <body>
          <![CDATA[
            let prefsvc =Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefBranch);
            prefsvc.setIntPref("accessibility.typeaheadfind.casesensitive", aCaseSensitive ? 1 : 0);
            this._dispatchFindEvent("casesensitivitychange");
          ]]>
        </body>
      </method>
      <field name="_strBundle">null</field>
      <property name="strBundle">
        <getter>
          <![CDATA[
            if (!this._strBundle) {
              this._strBundle =Components.classes["@mozilla.org/intl/stringbundle;1"].getService(Components.interfaces.nsIStringBundleService).createBundle("chrome://global/locale/findbar.properties");
            }
            return this._strBundle;
          ]]>
        </getter>
      </property>
      <method name="open">
        <parameter name="aMode"/>
        <body>
          <![CDATA[
            if (aMode != undefined) this._findMode = aMode;
            if (!this._notFoundStr) {
              let prefsvc = Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefBranch);
              var stringsBundle = this.strBundle;
              this._notFoundStr = stringsBundle.GetStringFromName("NotFound");
              this._wrappedToTopStr = prefsvc.getCharPref("extensions.stylishmod.reachedtoptext"); //stringsBundle.GetStringFromName("WrappedToTop");
              this._wrappedToBottomStr = prefsvc.getCharPref("extensions.stylishmod.reachedbottomtext"); //stringsBundle.GetStringFromName("WrappedToBottom");
              this._normalFindStr = stringsBundle.GetStringFromName("NormalFind");
              this._fastFindStr = stringsBundle.GetStringFromName("FastFind");
              this._fastFindLinksStr = stringsBundle.GetStringFromName("FastFindLinks");
              this._caseSensitiveStr = stringsBundle.GetStringFromName("CaseSensitive");
            }
            this._findFailedString = null;
            this._updateFindUI();
            if (this.hidden) {
              this.hidden = false;
              this._updateStatusUI(this.nsITypeAheadFind.FIND_FOUND);
              let event = document.createEvent("Events");
              event.initEvent("findbaropen", true, false);
              this.dispatchEvent(event);
              return true;
            }
            return false;
          ]]>
        </body>
      </method>
      <method name="close">
        <body>
          <![CDATA[
            if (this.hidden) return;
            this.hidden = true;
            this.browser.finder.focusContent();
            this.browser.finder.enableSelection();
            this._findField.blur();
            this._cancelTimers();
            this._findFailedString = null;
          ]]>
        </body>
      </method>
      <method name="clear">
        <body>
          <![CDATA[
            this.browser.finder.removeSelection();
            this._findField.reset();
            this.toggleHighlight(false);
            this._updateStatusUI();
            this._enableFindButtons(false);
          ]]>
        </body>
      </method>
      <method name="_dispatchKeypressEvent">
        <parameter name="aTarget"/>
        <parameter name="aEvent"/>
        <body>
          <![CDATA[
            if (!aTarget) return;
            let event = document.createEvent("KeyEvents");
            event.initKeyEvent(aEvent.type, aEvent.bubbles, aEvent.cancelable, aEvent.view, aEvent.ctrlKey, aEvent.altKey, aEvent.shiftKey, aEvent.metaKey, aEvent.keyCode, aEvent.charCode);
            aTarget.dispatchEvent(event);
          ]]>
        </body>
      </method>
      <field name="_xulBrowserWindow">null</field>
      <method name="_updateStatusUIBar">
        <parameter name="aFoundURL"/>
        <body>
          <![CDATA[
            if (!this._xulBrowserWindow) {
              try {
                this._xulBrowserWindow =
                  window.QueryInterface(Components.interfaces.nsIInterfaceRequestor).getInterface(Components.interfaces.nsIWebNavigation).QueryInterface(Components.interfaces.nsIDocShellTreeItem)
                    .treeOwner.QueryInterface(Components.interfaces.nsIInterfaceRequestor).getInterface(Components.interfaces.nsIXULWindow).XULBrowserWindow;
              }
              catch(ex) { }
              if (!this._xulBrowserWindow) return false;
            }
            this._xulBrowserWindow.setOverLink(aFoundURL || "", null);
            return true;
          ]]>
        </body>
      </method>
      <method name="_finishFAYT">
        <parameter name="aKeypressEvent"/>
        <body>
          <![CDATA[
            this.browser.finder.focusContent();
            if (aKeypressEvent) aKeypressEvent.preventDefault();
            this.browser.finder.keyPress(aKeypressEvent);
            this.close();
            return true;
          ]]>
        </body>
      </method>
      <method name="_mimeTypeIsTextBased">
        <parameter name="aMimeType"/>
        <body>
          <![CDATA[
            return /^text\/|\+xml$/.test(aMimeType) || aMimeType == "application/x-javascript" || aMimeType == "application/javascript" || aMimeType == "application/json" || aMimeType == "application/xml";
          ]]>
        </body>
      </method>
      <method name="_shouldFastFind">
        <parameter name="aEvent"/>
        <body>
          <![CDATA[
            if (aEvent.ctrlKey || aEvent.altKey || aEvent.metaKey || aEvent.defaultPrevented) return false;
            let {BrowserUtils} = Components.utils.import("resource://gre/modules/BrowserUtils.jsm", {});
            let [elt, win] = BrowserUtils.getFocusSync(document);
            if (elt) {
              if (elt instanceof HTMLInputElement && elt.mozIsTextField(false)) return false;
              if (elt.isContentEditable) return false;
              if (elt instanceof HTMLTextAreaElement || elt instanceof HTMLSelectElement || elt instanceof HTMLObjectElement || elt instanceof HTMLEmbedElement) return false;
            }
            if (win && !this._mimeTypeIsTextBased(win.document.contentType)) return false;
            let url = this.browser.currentURI;
            if (url.spec == "about:blank") return false;
            if ((url.schemeIs("about") || url.schemeIs("chrome")) && (win.document.documentElement && win.document.documentElement.getAttribute("disablefastfind") == "true")) return false;
            if (win) {
              try {
                let editingSession = win.QueryInterface(Components.interfaces.nsIInterfaceRequestor).getInterface(Components.interfaces.nsIWebNavigation)
                  .QueryInterface(Components.interfaces.nsIInterfaceRequestor).getInterface(Components.interfaces.nsIEditingSession);
                if (editingSession.windowIsEditable(win)) return false;
              }
              catch (e) {}
            }
            return true;
          ]]>
        </body>
      </method>
      <method name="_shouldBeCaseSensitive">
        <parameter name="aString"/>
        <body>
          <![CDATA[
            if (this._typeAheadCaseSensitive == 0) return false;
            if (this._typeAheadCaseSensitive == 1) return true;
            return aString != aString.toLowerCase();
          ]]>
        </body>
      </method>
      <method name="_onBrowserKeypress">
        <parameter name="aEvent"/>
        <body>
          <![CDATA[
            const TAF_LINKS_KEY = "'";
            const TAF_TEXT_KEY = "/";
            if (!this._shouldFastFind(aEvent)) return;
            if (this._findMode != this.FIND_NORMAL && this._quickFindTimeout) {
              if (!aEvent.charCode) return;
              this._findField.select();
              this._findField.focus();
              this._dispatchKeypressEvent(this._findField.inputField, aEvent);
              aEvent.preventDefault();
              return;
            }
            let key = aEvent.charCode ? String.fromCharCode(aEvent.charCode) : null;
            let manualstartFAYT = (key == TAF_LINKS_KEY || key == TAF_TEXT_KEY);
            let autostartFAYT = !manualstartFAYT && this._useTypeAheadFind && key && key != " ";
            if (manualstartFAYT || autostartFAYT) {
              let mode = (key == TAF_LINKS_KEY || (autostartFAYT && this._typeAheadLinksOnly)) ? this.FIND_LINKS : this.FIND_TYPEAHEAD;
              this._findField.value = "";
              this.open(mode);
              this._setFindCloseTimeout();
              this._findField.select();
              this._findField.focus();
              if (autostartFAYT) this._dispatchKeypressEvent(this._findField.inputField, aEvent);
              else this._updateStatusUI(this.nsITypeAheadFind.FIND_FOUND);
              aEvent.preventDefault();
            }
          ]]>
        </body>
      </method>
      <method name="handleEvent">
        <parameter name="aEvent"/>
        <body>
          <![CDATA[
            switch (aEvent.type) {
              case "mouseup":
                if (!this.hidden && this._findMode != this.FIND_NORMAL) this.close();
                break;
              case "keypress":
                this._onBrowserKeypress(aEvent);
                break;
            }
          ]]>
        </body>
      </method>
      <method name="_enableFindButtons">
        <parameter name="aEnable"/>
        <body>
          <![CDATA[
            this.getElement("find-next").disabled = this.getElement("find-previous").disabled = !aEnable;
          ]]>
        </body>
      </method>
      <method name="_updateFindUI">
        <body>
          <![CDATA[
            let showMinimalUI = this._findMode != this.FIND_NORMAL;
            let nodes = this.getElement("findbar-container").childNodes;
            let wrapper = this.getElement("findbar-textbox-wrapper");
            for (let node of nodes) {
              if (node == wrapper) continue;
              node.hidden = showMinimalUI;
            }
            this.getElement("find-next").hidden = this.getElement("find-previous").hidden = showMinimalUI;
            this._updateCaseSensitivity();
            if (showMinimalUI) this._findField.classList.add("minimal");
            else this._findField.classList.remove("minimal");
            if (this._findMode == this.FIND_TYPEAHEAD) this._findField.placeholder = this._fastFindStr;
            else if (this._findMode == this.FIND_LINKS) this._findField.placeholder = this._fastFindLinksStr;
            else this._findField.placeholder = this._normalFindStr;
          ]]>
        </body>
      </method>
      <method name="_find">
        <parameter name="aValue"/>
        <body>
          <![CDATA[
            if (!this._dispatchFindEvent("")) return;
            let val = aValue || this._findField.value;
            this.browser._lastSearchString = val;
            if (!this._findFailedString || !val.startsWith(this._findFailedString)) {
              this._enableFindButtons(val);
              if (this.getElement("highlight").checked) this._setHighlightTimeout();
              this._updateCaseSensitivity(val);
              this.browser.finder.fastFind(val, this._findMode == this.FIND_LINKS, this._findMode != this.FIND_NORMAL);
            }
            if (this._findMode != this.FIND_NORMAL) this._setFindCloseTimeout();
            if (this._findResetTimeout != -1) clearTimeout(this._findResetTimeout);
            this._findResetTimeout = setTimeout(() => {
              this._findFailedString = null;
              this._findResetTimeout = -1;
            }, 1000);
          ]]>
        </body>
      </method>
      <method name="_flash">
        <body>
          <![CDATA[
            if (this._flashFindBarCount === undefined) this._flashFindBarCount = this._initialFlashFindBarCount;
            if (this._flashFindBarCount-- == 0) {
              clearInterval(this._flashFindBarTimeout);
              this.removeAttribute("flash");
              this._flashFindBarCount = 6;
              return;
            }
            this.setAttribute("flash", (this._flashFindBarCount % 2 == 0) ? "false" : "true");
          ]]>
        </body>
      </method>
      <method name="_setHighlightTimeout">
        <body>
          <![CDATA[
            if (this._highlightTimeout) clearTimeout(this._highlightTimeout);
            this._highlightTimeout = setTimeout(function(aSelf) {aSelf.toggleHighlight(false); aSelf.toggleHighlight(true);}, 500, this);
          ]]>
        </body>
      </method>
      <method name="_findAgain">
        <parameter name="aFindPrevious"/>
        <body>
          <![CDATA[
            this.browser.finder.findAgain(aFindPrevious, this._findMode == this.FIND_LINKS, this._findMode != this.FIND_NORMAL);
          ]]>
        </body>
      </method>
      <method name="_updateStatusUI">
        <parameter name="res"/>
        <parameter name="aFindPrevious"/>
        <body>
          <![CDATA[
            switch (res) {
              case this.nsITypeAheadFind.FIND_WRAPPED:
                this._findStatusIcon.setAttribute("status", "wrapped");
                this._findStatusDesc.textContent = aFindPrevious ? this._wrappedToBottomStr : this._wrappedToTopStr;
                this._findField.removeAttribute("status");
                break;
              case this.nsITypeAheadFind.FIND_NOTFOUND:
                this._findStatusIcon.setAttribute("status", "notfound");
                this._findStatusDesc.textContent = this._notFoundStr;
                this._findField.setAttribute("status", "notfound");
                break;
              case this.nsITypeAheadFind.FIND_PENDING:
                this._findStatusIcon.setAttribute("status", "pending");
                this._findStatusDesc.textContent = "";
                this._findField.removeAttribute("status");
                break;
              case this.nsITypeAheadFind.FIND_FOUND:
              default:
                this._findStatusIcon.removeAttribute("status");
                this._findStatusDesc.textContent = "";
                this._findField.removeAttribute("status");
                break;
            }
            this._updateMatchesCount(res);
          ]]>
        </body>
      </method>
      <method name="updateControlState">
        <parameter name="aResult"/>
        <parameter name="aFindPrevious"/>
        <body>
          <![CDATA[
            this._updateStatusUI(aResult, aFindPrevious);
            this._enableFindButtons(aResult !== this.nsITypeAheadFind.FIND_NOTFOUND);
          ]]>
        </body>
      </method>
      <method name="_getInitialSelection">
        <body>
          <![CDATA[
            let focusedElement = document.commandDispatcher.focusedElement;
            let selText;
            if (focusedElement instanceof Components.interfaces.nsIDOMNSEditableElement && focusedElement.editor && focusedElement.ownerDocument.defaultView.top == this._browser.contentWindow) {
              selText = focusedElement.editor.selectionController.getSelection(Components.interfaces.nsISelectionController.SELECTION_NORMAL).toString();
            }
            else {
              let focusedWindow = document.commandDispatcher.focusedWindow;
              if (focusedWindow.top == this._browser.contentWindow) selText = focusedWindow.getSelection().toString();
            }
            if (!selText) return "";
            if (selText.length > this._selectionMaxLen) {
              let pattern = new RegExp("^(?:\\s*.){0," + this._selectionMaxLen + "}");
              pattern.test(selText);
              selText = RegExp.lastMatch;
            }
            return selText.replace(/^\s+/, "").replace(/\s+$/, "").replace(/\s+/g, " ").substr(0, this._selectionMaxLen);
          ]]>
        </body>
      </method>
      <method name="_dispatchFindEvent">
        <parameter name="aType"/>
        <parameter name="aFindPrevious"/>
        <body>
          <![CDATA[
            let event = document.createEvent("CustomEvent");
            event.initCustomEvent("find" + aType, true, true, {
              query: this._findField.value,
              caseSensitive: !!this._typeAheadCaseSensitive,
              highlightAll: this.getElement("highlight").checked,
              findPrevious: aFindPrevious
            });
            return this.dispatchEvent(event);
          ]]>
        </body>
      </method>
      <method name="startFind">
        <parameter name="aMode"/>
        <body>
          <![CDATA[
            let prefsvc = Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefBranch);
            let userWantsPrefill = true;
            this.open(aMode);
            if (this._flashFindBar) {
              this._flashFindBarTimeout = setInterval(() => this._flash(), 500);
              prefsvc.setIntPref("accessibility.typeaheadfind.flashBar", --this._flashFindBar);
            }
            if (this.prefillWithSelection) userWantsPrefill = prefsvc.getBoolPref("accessibility.typeaheadfind.prefillwithselection");
            let initialString = null;
            if (this.prefillWithSelection && userWantsPrefill) initialString = this._getInitialSelection();
            if (initialString) this._findField.value = initialString;
            this._enableFindButtons(!!this._findField.value);
            this._findField.select();
            this._findField.focus();
          ]]>
        </body>
      </method>
      <method name="onFindCommand">
        <body>
          <![CDATA[
            this.startFind(this.FIND_NORMAL);
          ]]>
        </body>
      </method>
      <method name="onFindAgainCommand">
        <parameter name="aFindPrevious"/>
        <body>
          <![CDATA[
            let findString = this._browser.finder.searchString || this._findField.value;
            if (!findString) {
              this.startFind();
              return;
            }
            if (!this._dispatchFindEvent("again", aFindPrevious)) return;
            this._findFailedString = null;
            if (this._findField.value != this._browser.finder.searchString) this._find(this._findField.value);
            else this._findAgain(aFindPrevious);
          ]]>
        </body>
      </method>
      <method name="onFindResult">
        <parameter name="aData"/>
        <body>
          <![CDATA[
            if (aData.storeResult && this._findField.value != this.browser.finder.searchString) this._findField.value = this.browser.finder.searchString;
            this._updateStatusUI(aData.result, aData.findBackwards);
            this._updateStatusUIBar(aData.linkURL);
            if (aData.result == this.nsITypeAheadFind.FIND_NOTFOUND) this._findFailedString = aData.searchString;
            else this._findFailedString = null;
            if (this._findMode != this.FIND_NORMAL) this._setFindCloseTimeout();
          ]]>
        </body>
      </method>
      <method name="onMatchesCountResult">
        <parameter name="aResult"/>
        <body>
          <![CDATA[
            if (aResult.total !== 0) {
              if (aResult.total == -1) {
                this._foundMatches.value = this.pluralForm.get(this._matchesCountLimit, this.strBundle.GetStringFromName("FoundMatchesCountLimit")).replace("#1", this._matchesCountLimit);
              } else {
                this._foundMatches.value = this.pluralForm.get(aResult.total,this.strBundle.GetStringFromName("FoundMatches")).replace("#1", aResult.current).replace("#2", aResult.total);
              }
              this._foundMatches.hidden = false;
            } else {
              this._foundMatches.hidden = true;
              this._foundMatches.value = "";
            }
          ]]>
        </body>
      </method>
      <method name="shouldFocusContent">
        <body>
          <![CDATA[
            const fm = Components.classes["@mozilla.org/focus-manager;1"].getService(Components.interfaces.nsIFocusManager);
            if (fm.focusedWindow != window) return false;
            let focusedElement = fm.focusedElement;
            if (!focusedElement) return false;
            let bindingParent = document.getBindingParent(focusedElement);
            if (bindingParent != this && bindingParent != this._findField) return false;
            return true;
          ]]>
        </body>
      </method>
    </implementation>
    <handlers>
      <handler event="keypress" keycode="VK_ESCAPE" phase="capturing" action="if (this.close) this.close();" preventdefault="true"/>
    </handlers>
  </binding>
</bindings>